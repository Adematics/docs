(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{987:function(t,e,a){"use strict";a.r(e);var s=a(19),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",[t._v("\n     Create\n")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.kestra.plugin.azure.batch.job.Create"')]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Create a Azure Batch job with tasks.")])]),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"create"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.kestra.plugin.azure.batch.job.Create"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("endpoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("***.francecentral.batch.azure.com")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <batch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("accessKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <access"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("poolId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" env\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("commandLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /bin/bash "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("c 'echo t1=$ENV_STRING'\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ENV_STRING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{ inputs.first }}"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" echo\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("commandLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"/bin/bash -c 'echo t2={{ inputs.second }} 1>&2'\"")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" for\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("commandLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /bin/bash "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("c 'for i in $(seq 10); do echo t3=$i; done'\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" vars\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("commandLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/bash -c \\"echo \'::{\\\\\\"outputs\\\\\\": {\\\\\\"extract\\\\\\":\\\\\\"\'$(cat files/in/in.txt)\'\\\\\\"}}::\'\\""')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resourceFiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("httpUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//unittestkt.blob.core.windows.net/tasks/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("***?sv=***&se=***&sr=***&sp=***&sig=***")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" files/in/in.txt\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" output\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("commandLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /bin/bash "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('c "mkdir '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p outs/child/sub "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" echo 1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" outs/1.txt "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v("  echo 2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" outs/child/2.txt  "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v("  echo 3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(' outs/child/sub/3.txt"\n  '),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("outputFiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" outs/1.txt\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("outputDirs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" outs/child\n")])])]),a("blockquote",[a("p",[t._v("Use a container to start the task, the pool must used a "),a("code",[t._v("microsoft-azure-batch")]),t._v(" publisher")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"create"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.kestra.plugin.azure.batch.job.Create"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("endpoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("***.francecentral.batch.azure.com")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <batch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("accessKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <access"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("poolId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" <job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" echo\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("commandLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'python --version'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerSettings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imageName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" python\n")])])]),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("h3",{attrs:{id:"accesskey"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accesskey"}},[t._v("#")]),t._v(" "),a("code",[t._v("accessKey")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The Batch access key.")])]),t._v(" "),a("h3",{attrs:{id:"account"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#account"}},[t._v("#")]),t._v(" "),a("code",[t._v("account")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The Batch account name.")])]),t._v(" "),a("h3",{attrs:{id:"endpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#endpoint"}},[t._v("#")]),t._v(" "),a("code",[t._v("endpoint")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The blob service endpoint.")])]),t._v(" "),a("p",[t._v("additionally parses it for information (SAS token)")]),t._v(" "),a("h3",{attrs:{id:"job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#job"}},[t._v("#")]),t._v(" "),a("code",[t._v("job")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#job"}},[t._v("Job")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The job to create.")])]),t._v(" "),a("h3",{attrs:{id:"maxduration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maxduration"}},[t._v("#")]),t._v(" "),a("code",[t._v("maxDuration")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Format:")]),t._v(" "),a("code",[t._v("duration")])])]),t._v(" "),a("blockquote",[a("p",[t._v("The max total wait duration")])]),t._v(" "),a("p",[t._v("If null, there is no timeout and end is delegate to Azure Batch")]),t._v(" "),a("h3",{attrs:{id:"poolid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#poolid"}},[t._v("#")]),t._v(" "),a("code",[t._v("poolId")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The ID of the pool.")])]),t._v(" "),a("h3",{attrs:{id:"tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tasks"}},[t._v("#")]),t._v(" "),a("code",[t._v("tasks")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("array")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#task"}},[t._v("Task")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The list of tasks to be run.")])]),t._v(" "),a("h2",{attrs:{id:"outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputs"}},[t._v("#")]),t._v(" Outputs")]),t._v(" "),a("h3",{attrs:{id:"outputfiles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputfiles"}},[t._v("#")]),t._v(" "),a("code",[t._v("outputFiles")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("object")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[t._v("string")])])]),t._v(" "),a("blockquote",[a("p",[t._v("The output files uri in Kestra internal storage")])]),t._v(" "),a("h3",{attrs:{id:"vars"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vars"}},[t._v("#")]),t._v(" "),a("code",[t._v("vars")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("object")])])]),t._v(" "),a("blockquote",[a("p",[t._v("The value extract from output of the commands")])]),t._v(" "),a("h2",{attrs:{id:"definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[t._v("#")]),t._v(" Definitions")]),t._v(" "),a("h3",{attrs:{id:"outputfileblobcontainerdestination"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputfileblobcontainerdestination"}},[t._v("#")]),t._v(" "),a("code",[t._v("OutputFileBlobContainerDestination")])]),t._v(" "),a("h4",{attrs:{id:"containerurl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#containerurl"}},[t._v("#")]),t._v(" "),a("code",[t._v("containerUrl")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❓")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The URL of the container within Azure Blob Storage to which to upload the file(s).")])]),t._v(" "),a("p",[t._v("If not using a managed identity, the URL must include a Shared Access Signature (SAS) granting write permissions to the container.")]),t._v(" "),a("h4",{attrs:{id:"identityreference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identityreference"}},[t._v("#")]),t._v(" "),a("code",[t._v("identityReference")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#computenodeidentityreference"}},[t._v("ComputeNodeIdentityReference")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❓")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The reference to the user assigned identity to use to access Azure Blob Storage specified by containerUrl.")])]),t._v(" "),a("p",[t._v("The identity must have write access to the Azure Blob Storage container.")]),t._v(" "),a("h4",{attrs:{id:"path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path"}},[t._v("#")]),t._v(" "),a("code",[t._v("path")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The destination blob or virtual directory within the Azure Storage container.")])]),t._v(" "),a("p",[t._v("If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.")]),t._v(" "),a("h3",{attrs:{id:"containerregistry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#containerregistry"}},[t._v("#")]),t._v(" "),a("code",[t._v("ContainerRegistry")])]),t._v(" "),a("h4",{attrs:{id:"identityreference-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identityreference-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("identityReference")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#computenodeidentityreference"}},[t._v("ComputeNodeIdentityReference")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.")])]),t._v(" "),a("h4",{attrs:{id:"password"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#password"}},[t._v("#")]),t._v(" "),a("code",[t._v("password")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The password to log into the registry server.")])]),t._v(" "),a("h4",{attrs:{id:"registryserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registryserver"}},[t._v("#")]),t._v(" "),a("code",[t._v("registryServer")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The registry URL.")])]),t._v(" "),a("p",[t._v('If omitted, the default is "docker.io".')]),t._v(" "),a("h4",{attrs:{id:"username"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#username"}},[t._v("#")]),t._v(" "),a("code",[t._v("userName")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The user name to log into the registry server.")])]),t._v(" "),a("h3",{attrs:{id:"outputfileuploadoptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputfileuploadoptions"}},[t._v("#")]),t._v(" "),a("code",[t._v("OutputFileUploadOptions")])]),t._v(" "),a("h4",{attrs:{id:"uploadcondition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uploadcondition"}},[t._v("#")]),t._v(" "),a("code",[t._v("uploadCondition")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("taskcompletion")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Possible Values:")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("TASK_SUCCESS")])]),t._v(" "),a("li",[a("code",[t._v("TASK_FAILURE")])]),t._v(" "),a("li",[a("code",[t._v("TASK_COMPLETION")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("The conditions under which the Task output file or set of files should be uploaded..")])]),t._v(" "),a("h3",{attrs:{id:"computenodeidentityreference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computenodeidentityreference"}},[t._v("#")]),t._v(" "),a("code",[t._v("ComputeNodeIdentityReference")])]),t._v(" "),a("h4",{attrs:{id:"resourceid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resourceid"}},[t._v("#")]),t._v(" "),a("code",[t._v("resourceId")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The ARM resource id of the user assigned identity.")])]),t._v(" "),a("h3",{attrs:{id:"resourcefile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resourcefile"}},[t._v("#")]),t._v(" "),a("code",[t._v("ResourceFile")])]),t._v(" "),a("h4",{attrs:{id:"autostoragecontainername"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autostoragecontainername"}},[t._v("#")]),t._v(" "),a("code",[t._v("autoStorageContainerName")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The storage container name in the auto storage Account.")])]),t._v(" "),a("p",[t._v("The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.")]),t._v(" "),a("h4",{attrs:{id:"blobprefix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blobprefix"}},[t._v("#")]),t._v(" "),a("code",[t._v("blobPrefix")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The blob prefix to use when downloading blobs from an Azure Storage container.")])]),t._v(" "),a("p",[t._v("Only the blobs whose names begin with the specified prefix will be downloaded. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.")]),t._v(" "),a("h4",{attrs:{id:"filemode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filemode"}},[t._v("#")]),t._v(" "),a("code",[t._v("fileMode")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The file permission mode attribute in octal format.")])]),t._v(" "),a("p",[t._v("This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.")]),t._v(" "),a("h4",{attrs:{id:"filepath"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filepath"}},[t._v("#")]),t._v(" "),a("code",[t._v("filePath")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The location on the Compute Node to which to download the file(s), relative to the Task's working directory.")])]),t._v(" "),a("p",[t._v("If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task's working directory (for example by using '..').")]),t._v(" "),a("h4",{attrs:{id:"httpurl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httpurl"}},[t._v("#")]),t._v(" "),a("code",[t._v("httpUrl")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The URL of the file to download.")])]),t._v(" "),a("p",[t._v("The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.")]),t._v(" "),a("h4",{attrs:{id:"identityreference-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identityreference-3"}},[t._v("#")]),t._v(" "),a("code",[t._v("identityReference")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#computenodeidentityreference"}},[t._v("ComputeNodeIdentityReference")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The reference to the user assigned identity to use to access Azure Blob Storage specified by storageContainerUrl or httpUrl.")])]),t._v(" "),a("h4",{attrs:{id:"storagecontainerurl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storagecontainerurl"}},[t._v("#")]),t._v(" "),a("code",[t._v("storageContainerUrl")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The URL of the blob container within Azure Blob Storage.")])]),t._v(" "),a("p",[t._v("The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.")]),t._v(" "),a("h3",{attrs:{id:"taskcontainersettings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskcontainersettings"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskContainerSettings")])]),t._v(" "),a("h4",{attrs:{id:"containerrunoptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#containerrunoptions"}},[t._v("#")]),t._v(" "),a("code",[t._v("containerRunOptions")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Additional options to the container create command.")])]),t._v(" "),a("p",[t._v('These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.')]),t._v(" "),a("h4",{attrs:{id:"imagename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imagename"}},[t._v("#")]),t._v(" "),a("code",[t._v("imageName")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The Image to use to create the container in which the Task will run.")])]),t._v(" "),a("p",[t._v('This is the full Image reference, as would be specified to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.')]),t._v(" "),a("h4",{attrs:{id:"registry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registry"}},[t._v("#")]),t._v(" "),a("code",[t._v("registry")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#containerregistry"}},[t._v("ContainerRegistry")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The private registry which contains the container Image.")])]),t._v(" "),a("p",[t._v("This setting can be omitted if was already provided at Pool creation.")]),t._v(" "),a("h4",{attrs:{id:"workingdirectory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workingdirectory"}},[t._v("#")]),t._v(" "),a("code",[t._v("workingDirectory")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Possible Values:")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("TASK_WORKING_DIRECTORY")])]),t._v(" "),a("li",[a("code",[t._v("CONTAINER_IMAGE_DEFAULT")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("The location of the container Task working directory.")])]),t._v(" "),a("p",[t._v("The default is 'taskWorkingDirectory'. Possible values include: 'taskWorkingDirectory', 'containerImageDefault'.")]),t._v(" "),a("h3",{attrs:{id:"task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[t._v("#")]),t._v(" "),a("code",[t._v("Task")])]),t._v(" "),a("h4",{attrs:{id:"commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[t._v("#")]),t._v(" "),a("code",[t._v("commands")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("array")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The command line of the Task.")])]),t._v(" "),a("p",[t._v('For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided '),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("environment variable"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v('Command will be passed as /bin/sh -c "command" by default.')]),t._v(" "),a("h4",{attrs:{id:"constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constraints"}},[t._v("#")]),t._v(" "),a("code",[t._v("constraints")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#taskconstraints"}},[t._v("TaskConstraints")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The execution constraints that apply to this Task.")])]),t._v(" "),a("h4",{attrs:{id:"containersettings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#containersettings"}},[t._v("#")]),t._v(" "),a("code",[t._v("containerSettings")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#taskcontainersettings"}},[t._v("TaskContainerSettings")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The settings for the container under which the Task runs.")])]),t._v(" "),a("p",[t._v("If the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.")]),t._v(" "),a("h4",{attrs:{id:"displayname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#displayname"}},[t._v("#")]),t._v(" "),a("code",[t._v("displayName")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Max length:")]),t._v(" "),a("code",[t._v("1024")])])]),t._v(" "),a("blockquote",[a("p",[t._v("A display name for the Task.")])]),t._v(" "),a("p",[t._v("The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.")]),t._v(" "),a("h4",{attrs:{id:"environments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#environments"}},[t._v("#")]),t._v(" "),a("code",[t._v("environments")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("object")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("A list of environment variable settings for the Task.")])]),t._v(" "),a("h4",{attrs:{id:"id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[t._v("#")]),t._v(" "),a("code",[t._v("id")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Max length:")]),t._v(" "),a("code",[t._v("64")])])]),t._v(" "),a("blockquote",[a("p",[t._v("A string that uniquely identifies the Task within the Job.")])]),t._v(" "),a("p",[t._v("The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a Job that differ only by case)."),a("br"),t._v("\nIf not provided, a random uuid will be generated.")]),t._v(" "),a("h4",{attrs:{id:"interpreter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interpreter"}},[t._v("#")]),t._v(" "),a("code",[t._v("interpreter")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("/bin/sh")])]),t._v(" "),a("li",[a("strong",[t._v("Min length:")]),t._v(" "),a("code",[t._v("1")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Interpreter to used")])]),t._v(" "),a("h4",{attrs:{id:"interpreterargs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interpreterargs"}},[t._v("#")]),t._v(" "),a("code",[t._v("interpreterArgs")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("array")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("[-c]")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Interpreter args used")])]),t._v(" "),a("h4",{attrs:{id:"outputdirs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputdirs"}},[t._v("#")]),t._v(" "),a("code",[t._v("outputDirs")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("array")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Output dirs list that will be uploaded to internal storage")])]),t._v(" "),a("p",[t._v("List of key that will generate temporary directories."),a("br"),t._v("\nOn the command, just can use with special variable named "),a("code",[t._v("outputDirs.key")]),t._v("."),a("br"),t._v("\nIf you add a files with "),a("code",[t._v('["myDir"]')]),t._v(", you can use the special vars "),a("code",[t._v("echo 1 >> {[ outputDirs.myDir }}/file1.txt")]),t._v(" and "),a("code",[t._v("echo 2 >> {[ outputDirs.myDir }}/file2.txt")]),t._v(" and both files will be uploaded to internal storage. Then you can used them on others tasks using "),a("code",{pre:!0},[t._v("{{  outputs.taskId.files['myDir/file1.txt']  }}")])]),t._v(" "),a("h4",{attrs:{id:"outputfiles-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputfiles-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("outputFiles")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("array")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Output file list that will be uploaded to internal storage")])]),t._v(" "),a("p",[t._v("List of key that will generate temporary files."),a("br"),t._v("\nOn the command, just can use with special variable named "),a("code",[t._v("outputFiles.key")]),t._v("."),a("br"),t._v("\nIf you add a files with "),a("code",[t._v('["first"]')]),t._v(", you can use the special vars "),a("code",[t._v("echo 1 >> {[ outputFiles.first }}")]),t._v(" and you used on others tasks using "),a("code",{pre:!0},[t._v("{{  outputs.task-id.files.first  }}")])]),t._v(" "),a("h4",{attrs:{id:"requiredslots"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requiredslots"}},[t._v("#")]),t._v(" "),a("code",[t._v("requiredSlots")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("integer")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The number of scheduling slots that the Task requires to run.")])]),t._v(" "),a("p",[t._v("The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.")]),t._v(" "),a("h4",{attrs:{id:"resourcefiles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resourcefiles"}},[t._v("#")]),t._v(" "),a("code",[t._v("resourceFiles")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("array")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#resourcefile"}},[t._v("ResourceFile")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("A list of files that the Batch service will download to the Compute Node before running the command line.")])]),t._v(" "),a("p",[t._v("For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.")]),t._v(" "),a("h4",{attrs:{id:"uploadfiles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uploadfiles"}},[t._v("#")]),t._v(" "),a("code",[t._v("uploadFiles")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("array")])]),t._v(" "),a("li",[a("strong",[t._v("SubType:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#outputfile"}},[t._v("OutputFile")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("A list of files that the Batch service will upload from the Compute Node after running the command line.")])]),t._v(" "),a("p",[t._v("For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.")]),t._v(" "),a("h3",{attrs:{id:"outputfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputfile"}},[t._v("#")]),t._v(" "),a("code",[t._v("OutputFile")])]),t._v(" "),a("h4",{attrs:{id:"destination"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#destination"}},[t._v("#")]),t._v(" "),a("code",[t._v("destination")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#outputfiledestination"}},[t._v("OutputFileDestination")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("The destination for the output file(s).")])]),t._v(" "),a("h4",{attrs:{id:"filepattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filepattern"}},[t._v("#")]),t._v(" "),a("code",[t._v("filePattern")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("A pattern indicating which file(s) to upload.")])]),t._v(" "),a("p",[t._v('Both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with "." it is ignored by default but may be matched by specifying it explicitly (for example '),a("em",[t._v(".gif will not match .a.gif, but .")]),t._v(".gif will). A simple example: ***.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc["),a("em",[t._v("] would match a file named abc")]),t._v("). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.")]),t._v(" "),a("h4",{attrs:{id:"uploadoptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uploadoptions"}},[t._v("#")]),t._v(" "),a("code",[t._v("uploadOptions")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#outputfileuploadoptions"}},[t._v("OutputFileUploadOptions")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("{uploadCondition=taskcompletion}")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Additional options for the upload operation, including under what conditions to perform the upload.")])]),t._v(" "),a("h3",{attrs:{id:"job-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#job-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("Job")])]),t._v(" "),a("h4",{attrs:{id:"displayname-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#displayname-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("displayName")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Max length:")]),t._v(" "),a("code",[t._v("1024")])])]),t._v(" "),a("blockquote",[a("p",[t._v("The display name for the Job.")])]),t._v(" "),a("p",[t._v("The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.")]),t._v(" "),a("h4",{attrs:{id:"id-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#id-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("id")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Max length:")]),t._v(" "),a("code",[t._v("64")])])]),t._v(" "),a("blockquote",[a("p",[t._v("A string that uniquely identifies the Job within the Account.")])]),t._v(" "),a("p",[t._v("The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).")]),t._v(" "),a("h4",{attrs:{id:"maxparalleltasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maxparalleltasks"}},[t._v("#")]),t._v(" "),a("code",[t._v("maxParallelTasks")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("integer")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The maximum number of tasks that can be executed in parallel for the job.")])]),t._v(" "),a("p",[t._v("The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.")]),t._v(" "),a("h4",{attrs:{id:"priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priority"}},[t._v("#")]),t._v(" "),a("code",[t._v("priority")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("integer")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The priority of the Job.")])]),t._v(" "),a("p",[t._v("Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.")]),t._v(" "),a("h3",{attrs:{id:"taskconstraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskconstraints"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskConstraints")])]),t._v(" "),a("h4",{attrs:{id:"maxtaskretrycount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maxtaskretrycount"}},[t._v("#")]),t._v(" "),a("code",[t._v("maxTaskRetryCount")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("integer")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The maximum number of times the Task may be retried.")])]),t._v(" "),a("p",[t._v("The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit.")]),t._v(" "),a("h4",{attrs:{id:"maxwallclocktime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maxwallclocktime"}},[t._v("#")]),t._v(" "),a("code",[t._v("maxWallClockTime")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Format:")]),t._v(" "),a("code",[t._v("duration")])])]),t._v(" "),a("blockquote",[a("p",[t._v("The maximum elapsed time that the Task may run, measured from the time the Task starts.")])]),t._v(" "),a("p",[t._v("If the Task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the Task may run.")]),t._v(" "),a("h4",{attrs:{id:"retentiontime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#retentiontime"}},[t._v("#")]),t._v(" "),a("code",[t._v("retentionTime")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Format:")]),t._v(" "),a("code",[t._v("duration")])])]),t._v(" "),a("blockquote",[a("p",[t._v("The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.")])]),t._v(" "),a("p",[t._v("After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.")]),t._v(" "),a("h3",{attrs:{id:"outputfiledestination"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputfiledestination"}},[t._v("#")]),t._v(" "),a("code",[t._v("OutputFileDestination")])]),t._v(" "),a("h4",{attrs:{id:"container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#container"}},[t._v("#")]),t._v(" "),a("code",[t._v("container")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("mark",[a("a",{attrs:{href:"#outputfileblobcontainerdestination"}},[t._v("OutputFileBlobContainerDestination")])])]),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ✔️")])]),t._v(" "),a("blockquote",[a("p",[t._v("A location in Azure blob storage to which files are uploaded.")])])])}),[],!1,null,null,null);e.default=r.exports}}]);