(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{757:function(e,a,t){"use strict";t.r(a);var s=t(19),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flow"}},[e._v("#")]),e._v(" Flow")]),e._v(" "),t("p",[e._v("A "),t("a",{attrs:{href:"../developer-guide/flow"}},[e._v("flow")]),e._v(" is a simple list of tasks for Kestra, grouped by namespace. It defines all the behavior you want for the current flow.")]),e._v(" "),t("h2",{attrs:{id:"task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[e._v("#")]),e._v(" Task")]),e._v(" "),t("p",[e._v("A Task is single action in a flow."),t("br"),e._v("\nA task can optionally take inputs, perform an action, or produce an output.")]),e._v(" "),t("p",[e._v("There are 2 kind of Tasks in Kestra:")]),e._v(" "),t("h3",{attrs:{id:"flowable-task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flowable-task"}},[e._v("#")]),e._v(" Flowable Task")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/flowable"}},[e._v("Flowable Tasks")]),e._v(" are tasks that only handle workflow states and trigger new tasks. They will handle the logic of the flow enabling complex workflow like branching, parallel tasks, etc..."),t("br"),e._v("\nA simple example is a "),t("code",[e._v("Switch")]),e._v(" task that can take any inputs and decide which are the next tasks to run (and to allow branching).")]),e._v(" "),t("p",[e._v("A Flowable Task is handled by "),t("code",[e._v("Executors")]),e._v(" and can be called very often, so these tasks cannot include intensive computations.")]),e._v(" "),t("p",[e._v("The most common Flowable Tasks will be kept in the core.")]),e._v(" "),t("h3",{attrs:{id:"runnable-task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runnable-task"}},[e._v("#")]),e._v(" Runnable Task")]),e._v(" "),t("p",[e._v("Runnable Tasks are used to handle any computational work. This can be anything, including file systems operations, api calls, database queries, and more. These tasks can be compute intensive since they will be handled by "),t("code",[e._v("Workers")]),e._v(". By default, Kestra does not operate a lot of "),t("code",[e._v("Runnable Tasks")]),e._v(". Most tasks will be available as Plugins.")]),e._v(" "),t("h2",{attrs:{id:"namespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[e._v("#")]),e._v(" Namespace")]),e._v(" "),t("p",[e._v("A namespace is a like a folder for file systems. It aims to group flows in a limitless hierarchy."),t("br"),e._v("\nA Namespace is composed of word and letters separated by "),t("code",[e._v(".")]),e._v(". The hierarchy depth is not limited and is free for Kestra users to modify to fit their organization.")]),e._v(" "),t("h2",{attrs:{id:"inputs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[e._v("#")]),e._v(" Inputs")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/inputs"}},[e._v("Inputs")]),e._v(" are mandatory or optional parameters sent to a flow in order for it to be successfully run. It can be anything (string, int, file, ...) that will be sent when the execution is created. The Flow must define possible inputs, and mandatory ones will be validated before the creation of the execution.")]),e._v(" "),t("h2",{attrs:{id:"revision"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#revision"}},[e._v("#")]),e._v(" Revision")]),e._v(" "),t("p",[e._v("Each flow modification will produce a new revision. A revision is a simple incremental number that will update after each change made to the flow. Internally, Kestra will track and manage all revisions of the flow.")]),e._v(" "),t("h2",{attrs:{id:"listeners"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#listeners"}},[e._v("#")]),e._v(" Listeners")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/listeners"}},[e._v("Listeners")]),e._v(" are special tasks that can listen to the current flow and launch tasks "),t("em",[e._v("outside of the flow")]),e._v("."),t("br"),e._v("\nThe result of these tasks will not change the execution status. For the most part, Listeners are applied to send notifications or handle special end-task behaviour that you do not want to be considered as part of the main workflow.")]),e._v(" "),t("h2",{attrs:{id:"triggers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#triggers"}},[e._v("#")]),e._v(" Triggers")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/triggers"}},[e._v("Triggers")]),e._v(" are a way to start a flow from external events. For example, a trigger might initiate a flow on a scheduled date or at a particular time of day, or it can be dependent on external events (such as file creation).")]),e._v(" "),t("h2",{attrs:{id:"templates"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#templates"}},[e._v("#")]),e._v(" Templates")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/templates"}},[e._v("Templates")]),e._v(" are lists of tasks that can be shared between flows. You can define a template and call upon it from other flows, allowing you to share a list of tasks and keep these task updated without changing your flow.")])])}),[],!1,null,null,null);a.default=r.exports}}]);