(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{255:function(t,e,a){"use strict";a.r(e);var v=a(0),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"default-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-variables"}},[t._v("#")]),t._v(" Default Variables")]),t._v(" "),a("p",[t._v("The following table lists the configurable Variables of the Kestra.io and their default values.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Parameter")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ flow.id }}")])]),t._v(" "),a("td",[t._v('The name of your flow ID "example: barometre-1 ,each-sequential"')]),t._v(" "),a("td",[t._v("Matches alphanumeric (same as [a-zA-Z0-9_])")])]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ task.id }}")])]),t._v(" "),a("td",[t._v('The ID of your task ID "example: task-1-XXXXXX ,task-2-VVVVVVVV"')]),t._v(" "),a("td",[t._v("Matches alphanumeric (same as [a-zA-Z0-9_])")])]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ taskrun.id }}")])]),t._v(" "),a("td",[t._v("It's the ID of your execution Task")]),t._v(" "),a("td",[t._v("Matches alphanumeric (same as [a-zA-Z0-9_])")])]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ taskrun.value }}")])]),t._v(" "),a("td",[t._v('The result of your task "exemple: 0, 1"')]),t._v(" "),a("td",[t._v("Matches numeric (same as [0-9])")])]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ taskrun.attemptsCount }}")])]),t._v(" "),a("td",[t._v("The number of times that the task is launched for a given flow")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ taskrun.startDate }}")])]),t._v(" "),a("td",[t._v("Retrieves the launch date of the Task ID from the Flow ID")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ execution.id }}")])]),t._v(" "),a("td",[t._v("Return the execution ID of your flow")]),t._v(" "),a("td",[t._v("Matches numeric (same as [Z0-9_])")])]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ inputs.string }}")])]),t._v(" "),a("td",[t._v("Set Input data in String format for the flow")]),t._v(" "),a("td",[t._v("Matches string (same as [a-zA-Z])")])]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ inputs.int }}")])]),t._v(" "),a("td",[t._v("Set Input data in Int format for the flow")]),t._v(" "),a("td",[t._v("Matches string (same as [0-9])")])]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ inputs.float }}")])]),t._v(" "),a("td",[t._v("Set Input data in Float format for the flow")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ inputs.instant }}")])]),t._v(" "),a("td",[t._v("Enable instant input")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ inputs.file.content }}")])]),t._v(" "),a("td",[t._v("Reading file contents on input for the flow ex  yaml,txt,....")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ inputs.file }}")])]),t._v(" "),a("td",[t._v("Reading file path on input for the flow     ex  /tmp/file.txt")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",{pre:!0},[t._v("{{ inputs.file.uri }}")])]),t._v(" "),a("td",[t._v("Reading file from URI value for the flow    ex http://stock.io/myfile.txt")]),t._v(" "),a("td")])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("TODO")])])])}),[],!1,null,null,null);e.default=_.exports}}]);