(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{786:function(t,s,a){"use strict";a.r(s);var e=a(19),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputs"}},[t._v("#")]),t._v(" Outputs")]),t._v(" "),a("p",[t._v("Kestra's flows can produce outputs when processing tasks. Output data is stored in execution flow context and can be handled and used by tasks executed after the output producer task.")]),t._v(" "),a("p",[t._v("You can use outputs everywhere "),a("RouterLink",{attrs:{to:"/docs/developer-guide/variables/"}},[t._v("variables")]),t._v(" are allowed, so they can be used as next task values for iteration or conditional processing, or even as extra output content.")],1),t._v(" "),a("h2",{attrs:{id:"using-outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-outputs"}},[t._v("#")]),t._v(" Using outputs")]),t._v(" "),a("p",[t._v("You can declare as many outputs as desired for any flow. Outputs context variables are stored following each task declaration.")]),t._v(" "),a("p",[t._v("Here how to use an output between tasks into a flow:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" produce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("output\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my output "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" execution.id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" use"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("output\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Echo\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" This task display previous task output "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" outputs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'produce-output'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("In the example above the first task produces an output with the format of a yaml property. The output content is then used in the second task output template. Indeed, the "),a("code",[t._v("use-output")]),t._v(" task uses the templating system "),a("code",{pre:!0},[t._v("{{ outputs['produce-output'].value }}")]),t._v(" to reference the previous task output. If you're not familiar with the syntax used here, please read "),a("RouterLink",{attrs:{to:"/docs/developer-guide/variables/basic-usage.html"}},[t._v("variables basic usage")]),t._v(".")],1),t._v(" "),a("p",[t._v("Using this template context variable interpolates the bracket reference with the entire output generated by the first task.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("note")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v(".value")]),t._v(" in the template bracket that uses another task's output content is a variable name that depends on which data is produced by the task. In our case, for the "),a("strong",[t._v("Return")]),t._v(" task, the "),a("code",[t._v("value")]),t._v(" variable is filled with the output. It could be "),a("code",[t._v("bq_table")]),t._v(" for another task implemented for BigQuery management by example. Have a look at each task documentation for specific information about what context variables are filled with output contents or use the "),a("code",[t._v("Outputs")]),t._v(" tab of a flow execution from the UI.")])]),t._v(" "),a("h2",{attrs:{id:"storage-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-variables"}},[t._v("#")]),t._v(" Storage variables")]),t._v(" "),a("p",[t._v("Each task can store data into Kestra storage. This one output an url that points to the storage location of the data.")]),t._v(" "),a("p",[t._v("This output variable can be used by other tasks to access the stored data.")]),t._v(" "),a("p",[t._v("For example, to access stored query results from a task that will transform them to a CSV file:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("query\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.plugin.gcp.bigquery.Query\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("sql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n    SELECT * FROM `bigquery-public-data.wikipedia.pageviews_2023`\n    WHERE DATE(datehour) = current_date()\n    ORDER BY datehour desc, views desc\n    LIMIT 10")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("csv\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.plugin.serdes.csv.CsvWriter\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"{{outputs['output-from-query'].uri}}\"")]),t._v("\n")])])]),a("h2",{attrs:{id:"dynamic-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-variables"}},[t._v("#")]),t._v(" Dynamic variables")]),t._v(" "),a("h4",{attrs:{id:"current-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#current-value"}},[t._v("#")]),t._v(" Current value")]),t._v(" "),a("p",[t._v("You can access the current value with "),a("code",{pre:!0},[t._v("{{ taskrun.value }}")]),t._v(" like this:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" each\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.flows.EachSequential\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["value 1", "value 2", "value 3"]\'')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inner\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{task.id}} > {{taskrun.value}} > {{taskrun.startDate}}"')]),t._v("\n")])])]),a("h3",{attrs:{id:"specific-outputs-for-dynamic-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specific-outputs-for-dynamic-tasks"}},[t._v("#")]),t._v(" Specific outputs for dynamic tasks")]),t._v(" "),a("p",[t._v("Another more specific case for output management is the runtime generated tasks output variable. This is the case for the "),a("strong",[t._v("EachSequential")]),t._v(" or "),a("strong",[t._v("EachParallel")]),t._v(" task, which produces other tasks dynamically, depending on it's "),a("code",[t._v("value")]),t._v(" property. In this case, it is possible to reach each iteration output individually using the following syntax:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sample\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.tests\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" each\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.flows.EachSequential\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sub\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{ task.id }} > {{ taskrun.value }} > {{ taskrun.startDate }}"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[\\"s1\\", \\"s2\\", \\"s3\\"]"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" use\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Previous task produced output : {{ outputs.sub.s1.value }}"')]),t._v("\n")])])]),a("p",[t._v("Here the "),a("code",[t._v("outputs.sub.s1.value")]),t._v(" reach the first "),a("code",[t._v("s1")]),t._v(" task element.")]),t._v(" "),a("h4",{attrs:{id:"previous-task-lookup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#previous-task-lookup"}},[t._v("#")]),t._v(" Previous task lookup")]),t._v(" "),a("p",[t._v("It is also possible to locate a special task by its "),a("code",[t._v("value")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" each\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.flows.EachSequential\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inner\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{ task.id }}"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[\\"value 1\\", \\"value 2\\", \\"value 3\\"]"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" end\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"{{ task.id }} > {{ outputs.inner['value 1'].value }}\"")]),t._v("\n")])])]),a("p",[t._v("It uses the format "),a("code",[t._v("outputs.TASKID.[VALUE].PROPERTY")]),t._v(". The special bracket "),a("code",[t._v("[]")]),t._v(" in  "),a("code",[t._v(".[VALUE].")]),t._v(" enable special chars like space (and can be remove without any special characters)")]),t._v(" "),a("h4",{attrs:{id:"lookup-in-sibling-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lookup-in-sibling-tasks"}},[t._v("#")]),t._v(" Lookup in sibling tasks")]),t._v(" "),a("p",[t._v("Sometimes, it can be useful to access previous outputs on the current task tree, what is called sibling tasks.")]),t._v(" "),a("p",[t._v("If the task tree is static, for example when using the "),a("RouterLink",{attrs:{to:"/plugins/core/tasks/flows/io.kestra.core.tasks.flows.Sequential.html"}},[t._v("Sequential")]),t._v(" task, you can use the "),a("code",{pre:!0},[t._v("{{outputs.sibling.value}}")]),t._v(" notation where "),a("code",[t._v("sibling")]),t._v("is the ID of the sibling task.")],1),t._v(" "),a("p",[t._v("If the task tree is static, for example when using the "),a("RouterLink",{attrs:{to:"/plugins/core/tasks/flows/io.kestra.core.tasks.flows.EachSequential.html"}},[t._v("EachSequential")]),t._v(" task, you need to use "),a("code",[t._v("sibling[taskrun.value]")]),t._v(" to access the current tree task. "),a("code",[t._v("taskrun.value")]),t._v(" is a special variable that hold the current value of the EachSequential task.")],1),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" each\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.flows.EachSequential\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" first\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{task.id}}"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" second\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{ outputs.first[taskrun.value].value }}"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[\\"value 1\\", \\"value 2\\", \\"value 3\\"]"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" end\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" io.kestra.core.tasks.debugs.Return\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"{{task.id}} > {{outputs.second['value 1'].value}}\"")]),t._v("\n")])])]),a("p",[t._v("When there is multiple levels of "),a("RouterLink",{attrs:{to:"/plugins/core/tasks/flows/io.kestra.core.tasks.flows.EachSequential.html"}},[t._v("EachSequential")]),t._v(" tasks, you can use the "),a("code",[t._v("parents")]),t._v(" variable to access the "),a("code",[t._v("taskrun.value")]),t._v(" of the parent of the current EachSequential. For example, for two levels of EachSequential you can use "),a("code",[t._v("outputs.sibling[parents[0].taskrun.value][taskrun.value].value")]),t._v(".")],1),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Accessing sibling task outputs is not possible on "),a("RouterLink",{attrs:{to:"/plugins/core/tasks/flows/io.kestra.core.tasks.flows.Parallel.html"}},[t._v("Parallel")]),t._v(" or "),a("RouterLink",{attrs:{to:"/plugins/core/tasks/flows/io.kestra.core.tasks.flows.EachParallel.html"}},[t._v("EachParallel")]),t._v(" as it runs tasks in parallel.")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);