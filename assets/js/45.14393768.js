(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{251:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"loadfromgcs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loadfromgcs"}},[t._v("#")]),t._v(" LoadFromGcs")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org.kestra.task.gcp.bigquery.LoadFromGcs"')]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Load data from GCS (Google Cloud Storage) to BigQuery")])]),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("blockquote",[a("p",[t._v("Load an avro file from a gcs bucket")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"load_from_gcs"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org.kestra.task.gcp.bigquery.LoadFromGcs"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{ outputs.avro-to-gcs }}"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("destinationTable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_project.my_dataset.my_table"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AVRO\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("avroOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("useAvroLogicalTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),a("h2",{attrs:{id:"inputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),a("h3",{attrs:{id:"autodetect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autodetect"}},[t._v("#")]),t._v(" "),a("code",[t._v("autodetect")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Boolean"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("[Experimental] Automatic inference of the options and schema for CSV and JSON sources")])]),t._v(" "),a("h3",{attrs:{id:"avrooptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avrooptions"}},[t._v("#")]),t._v(" "),a("code",[t._v("avroOptions")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"AvroOptions"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Avro parsing options")])]),t._v(" "),a("h3",{attrs:{id:"avrooptions-useavrologicaltypes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avrooptions-useavrologicaltypes"}},[t._v("#")]),t._v(" "),a("code",[t._v("avroOptions.useAvroLogicalTypes")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Boolean"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("If Format option is set to AVRO, you can interpret logical types into their corresponding\ntypes (such as TIMESTAMP) instead of only using their raw types (such as INTEGER)")])]),t._v(" "),a("p",[t._v("The value may be null.")]),t._v(" "),a("h3",{attrs:{id:"clusteringfields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clusteringfields"}},[t._v("#")]),t._v(" "),a("code",[t._v("clusteringFields")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"List<String>"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The clustering specification for the destination table")])]),t._v(" "),a("h3",{attrs:{id:"createdisposition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createdisposition"}},[t._v("#")]),t._v(" "),a("code",[t._v("createDisposition")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"CreateDisposition"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Possible Values:")]),t._v(" "),a("ul",[a("li",[t._v("CREATE_IF_NEEDED")]),t._v(" "),a("li",[t._v("CREATE_NEVER")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("Whether the job is allowed to create tables")])]),t._v(" "),a("h3",{attrs:{id:"csvoptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csvoptions"}},[t._v("#")]),t._v(" "),a("code",[t._v("csvOptions")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"CsvOptions"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Csv parsing options")])]),t._v(" "),a("h3",{attrs:{id:"csvoptions-allowjaggedrows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csvoptions-allowjaggedrows"}},[t._v("#")]),t._v(" "),a("code",[t._v("csvOptions.allowJaggedRows")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Boolean"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Whether BigQuery should accept rows that are missing trailing optional columns")])]),t._v(" "),a("p",[t._v("If true, BigQuery treats missing trailing columns as null values. If {@code false}, records\nwith missing trailing columns are treated as bad records, and if there are too many bad\nrecords, an invalid error is returned in the job result. By default, rows with missing\ntrailing columns are considered bad records.")]),t._v(" "),a("h3",{attrs:{id:"csvoptions-allowquotednewlines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csvoptions-allowquotednewlines"}},[t._v("#")]),t._v(" "),a("code",[t._v("csvOptions.allowQuotedNewLines")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Boolean"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Whether BigQuery should allow quoted data sections that contain newline characters in a CSV file")])]),t._v(" "),a("p",[t._v("By default quoted newline are not allowed.")]),t._v(" "),a("h3",{attrs:{id:"csvoptions-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csvoptions-encoding"}},[t._v("#")]),t._v(" "),a("code",[t._v("csvOptions.encoding")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The character encoding of the data")])]),t._v(" "),a("p",[t._v("The supported values are UTF-8 or ISO-8859-1. The\ndefault value is UTF-8. BigQuery decodes the data after the raw, binary data has been split\nusing the values set in {@link #setQuote(String)} and {@link #setFieldDelimiter(String)}.")]),t._v(" "),a("h3",{attrs:{id:"csvoptions-fielddelimiter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csvoptions-fielddelimiter"}},[t._v("#")]),t._v(" "),a("code",[t._v("csvOptions.fieldDelimiter")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The separator for fields in a CSV file")])]),t._v(" "),a("p",[t._v("BigQuery converts the string to ISO-8859-1\nencoding, and then uses the first byte of the encoded string to split the data in its raw,\nbinary state. BigQuery also supports the escape sequence \"\\t\" to specify a tab separator. The\ndefault value is a comma (',').")]),t._v(" "),a("h3",{attrs:{id:"csvoptions-quote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csvoptions-quote"}},[t._v("#")]),t._v(" "),a("code",[t._v("csvOptions.quote")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The value that is used to quote data sections in a CSV file")])]),t._v(" "),a("p",[t._v("BigQuery converts the\nstring to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split\nthe data in its raw, binary state. The default value is a double-quote ('\"'). If your data\ndoes not contain quoted sections, set the property value to an empty string. If your data\ncontains quoted newline characters, you must also set {@link\n#setAllowQuotedNewLines(boolean)} property to {@code true}.")]),t._v(" "),a("h3",{attrs:{id:"csvoptions-skipleadingrows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csvoptions-skipleadingrows"}},[t._v("#")]),t._v(" "),a("code",[t._v("csvOptions.skipLeadingRows")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Long"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The number of rows at the top of a CSV file that BigQuery will skip when reading the data")])]),t._v(" "),a("p",[t._v("The default value is 0. This property is useful if you have header rows in the file\nthat should be skipped.")]),t._v(" "),a("h3",{attrs:{id:"destinationtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#destinationtable"}},[t._v("#")]),t._v(" "),a("code",[t._v("destinationTable")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The table where to put query results")])]),t._v(" "),a("p",[t._v("If not provided a new table is created.")]),t._v(" "),a("h3",{attrs:{id:"fields-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fields-fields"}},[t._v("#")]),t._v(" "),a("code",[t._v("fields.fields")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"List<com.google.cloud.bigquery.Field>"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❓")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("h3",{attrs:{id:"fields-nameindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fields-nameindex"}},[t._v("#")]),t._v(" "),a("code",[t._v("fields.nameIndex")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Map<String, Integer>"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❓")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("h3",{attrs:{id:"format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[t._v("#")]),t._v(" "),a("code",[t._v("format")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Format"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Possible Values:")]),t._v(" "),a("ul",[a("li",[t._v("CSV")]),t._v(" "),a("li",[t._v("JSON")]),t._v(" "),a("li",[t._v("AVRO")]),t._v(" "),a("li",[t._v("PARQUET")]),t._v(" "),a("li",[t._v("ORC")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("The source format, and possibly some parsing options, of the external data")])]),t._v(" "),a("h3",{attrs:{id:"from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[t._v("#")]),t._v(" "),a("code",[t._v("from")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"List<String>"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Google Cloud Storage source data")])]),t._v(" "),a("p",[t._v("The fully-qualified URIs that point to source data in Google Cloud Storage (e.g.\ngs://bucket/path). Each URI can contain one '*' wildcard character and it must come after the\n'bucket' name.")]),t._v(" "),a("h3",{attrs:{id:"ignoreunknownvalues"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignoreunknownvalues"}},[t._v("#")]),t._v(" "),a("code",[t._v("ignoreUnknownValues")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Boolean"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("Whether BigQuery should allow extra values that are not represented in the table schema")])]),t._v(" "),a("p",[t._v("If true, the extra values are ignored. If false, records with extra columns\nare treated as bad records, and if there are too many bad records, an invalid error is\nreturned in the job result. By default unknown values are not allowed.")]),t._v(" "),a("h3",{attrs:{id:"location"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location"}},[t._v("#")]),t._v(" "),a("code",[t._v("location")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The geographic location where the dataset should reside")])]),t._v(" "),a("p",[t._v("This property is experimental\nand might be subject to change or removed.")]),t._v(" "),a("p",[t._v("See "),a("a",{attrs:{href:"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location"}},[t._v("Dataset\nLocation")])]),t._v(" "),a("h3",{attrs:{id:"maxbadrecords"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maxbadrecords"}},[t._v("#")]),t._v(" "),a("code",[t._v("maxBadRecords")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Integer"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The maximum number of bad records that BigQuery can ignore when running the job")])]),t._v(" "),a("p",[t._v("If the number of bad records exceeds this value, an invalid error is returned in the job result.\nBy default no bad record is ignored.")]),t._v(" "),a("h3",{attrs:{id:"projectid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#projectid"}},[t._v("#")]),t._v(" "),a("code",[t._v("projectId")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ✔️")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The GCP project id")])]),t._v(" "),a("h3",{attrs:{id:"schema"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema"}},[t._v("#")]),t._v(" "),a("code",[t._v("schema")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Com.google.cloud.bigquery.Schema"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The schema for the destination table")])]),t._v(" "),a("p",[t._v("The schema can be omitted if the destination table\nalready exists, or if you're loading data from a Google Cloud Datastore backup (i.e.\nDATASTORE_BACKUP format option).")]),t._v(" "),a("h3",{attrs:{id:"schema-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema-fields"}},[t._v("#")]),t._v(" "),a("code",[t._v("schema.fields")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Com.google.cloud.bigquery.FieldList"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❓")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("h3",{attrs:{id:"schemaupdateoptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schemaupdateoptions"}},[t._v("#")]),t._v(" "),a("code",[t._v("schemaUpdateOptions")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"List<SchemaUpdateOption>"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("[Experimental] Options allowing the schema of the destination table to be updated as a side effect of the query job")])]),t._v(" "),a("p",[t._v("Schema update options are supported in two cases: when\nwriteDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination\ntable is a partition of a table, specified by partition decorators. For normal tables,\nWRITE_TRUNCATE will always overwrite the schema.")]),t._v(" "),a("h3",{attrs:{id:"timepartitioningfield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timepartitioningfield"}},[t._v("#")]),t._v(" "),a("code",[t._v("timePartitioningField")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")])]),t._v(" "),a("blockquote",[a("p",[t._v("The time partitioning specification for the destination table")])]),t._v(" "),a("h3",{attrs:{id:"writedisposition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writedisposition"}},[t._v("#")]),t._v(" "),a("code",[t._v("writeDisposition")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"WriteDisposition"}})],1),t._v(" "),a("li",[a("strong",[t._v("Dynamic:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Required:")]),t._v(" ❌")]),t._v(" "),a("li",[a("strong",[t._v("Possible Values:")]),t._v(" "),a("ul",[a("li",[t._v("WRITE_TRUNCATE")]),t._v(" "),a("li",[t._v("WRITE_APPEND")]),t._v(" "),a("li",[t._v("WRITE_EMPTY")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("The action that should occur if the destination table already exists")])]),t._v(" "),a("h2",{attrs:{id:"outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputs"}},[t._v("#")]),t._v(" Outputs")]),t._v(" "),a("h3",{attrs:{id:"destinationtable-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#destinationtable-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("destinationTable")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1)]),t._v(" "),a("blockquote",[a("p",[t._v("Destination table")])]),t._v(" "),a("h3",{attrs:{id:"jobid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jobid"}},[t._v("#")]),t._v(" "),a("code",[t._v("jobId")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"String"}})],1)]),t._v(" "),a("blockquote",[a("p",[t._v("The job id")])]),t._v(" "),a("h3",{attrs:{id:"rows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rows"}},[t._v("#")]),t._v(" "),a("code",[t._v("rows")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Type:")]),t._v(" "),a("Badge",{attrs:{vertical:"middle",text:"Long"}})],1)]),t._v(" "),a("blockquote",[a("p",[t._v("Output rows count")])])])}),[],!1,null,null,null);e.default=r.exports}}]);