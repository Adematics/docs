(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{646:function(e,a,t){"use strict";t.r(a);var s=t(19),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flow"}},[e._v("#")]),e._v(" Flow")]),e._v(" "),t("p",[e._v("A "),t("a",{attrs:{href:"../developer-guide/flow"}},[e._v("flow")]),e._v(" is a list of task for Kestra. It defines all the behavior you want for the current flow. So, a flow is simple list of Task, group by namespace.")]),e._v(" "),t("h2",{attrs:{id:"task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[e._v("#")]),e._v(" Task")]),e._v(" "),t("p",[e._v("A Task is single action in a flow."),t("br"),e._v("\nA task is can optionally takes inputs, performs an action, and produces an optional outputs.")]),e._v(" "),t("p",[e._v("There is 2 kind of Task in Kestra :")]),e._v(" "),t("h3",{attrs:{id:"flowable-task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flowable-task"}},[e._v("#")]),e._v(" Flowable Task")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/flowable"}},[e._v("Flowable Task")]),e._v(" are tasks only handle workflow state and trigger new tasks. It will handle the logic of the flow allowing doing complex workflow like branching, parallel tasks, ..."),t("br"),e._v("\nA simple example is a "),t("code",[e._v("Switch")]),e._v(" task that can take any inputs and decide witch are the next tasks to run (and allow branching).")]),e._v(" "),t("p",[e._v("A Flowable Task is handled by "),t("code",[e._v("Executors")]),e._v(" and can be called very often, so it can't run intensive computation.")]),e._v(" "),t("p",[e._v("The Most common Flowable Task will be keep in the core.")]),e._v(" "),t("h3",{attrs:{id:"runnable-task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runnable-task"}},[e._v("#")]),e._v(" Runnable Task")]),e._v(" "),t("p",[e._v("Runnable Task are here to handle any computation work. This can be anything like file systems operation, api call, database query, ... Theses tasks can be compute intensive since it will be"),t("br"),e._v("\nhandle by "),t("code",[e._v("Workers")]),e._v(". By default, Kestra don't have a lot of "),t("code",[e._v("RunnableTask")]),e._v(" and mostly all the tasks will be available as Plugins.")]),e._v(" "),t("h2",{attrs:{id:"namespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[e._v("#")]),e._v(" Namespace")]),e._v(" "),t("p",[e._v("A namespace is a like a folder for file system. It aims to group flows in a limitless hierarchy."),t("br"),e._v("\nNamespace is compose by word and letters separated by "),t("code",[e._v(".")]),e._v(". The hierarchy depth is not limited and is free for Kestra users to fit their organization.")]),e._v(" "),t("h2",{attrs:{id:"inputs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[e._v("#")]),e._v(" Inputs")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/inputs"}},[e._v("Inputs")]),e._v(" are mandatory or optional parameters sent to a flow in order to be successfully run. It can be anythings (string, int, file, ...) to will be send when the execution is created. Flow must defined possible inputs and mandatory one will be validated before the creation of the execution.")]),e._v(" "),t("h2",{attrs:{id:"revision"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#revision"}},[e._v("#")]),e._v(" Revision")]),e._v(" "),t("p",[e._v("Each flow modification will produce a new revision, revision is a simple increments number that will update after each change of the flow. Internally Kestra will track and keep all revisions of the flow.")]),e._v(" "),t("h2",{attrs:{id:"listeners"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#listeners"}},[e._v("#")]),e._v(" Listeners")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/listeners"}},[e._v("Listeners")]),e._v(" are special task that can listen to the current flow and launch task "),t("em",[e._v("outside of the flow")]),e._v("."),t("br"),e._v("\nThe result of the tasks will not change the execution status. Mostly Listeners are here to send notification or handle special end task behaviour that you don't want to be considered as main workflow.")]),e._v(" "),t("h2",{attrs:{id:"triggers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#triggers"}},[e._v("#")]),e._v(" Triggers")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/triggers"}},[e._v("Triggers")]),e._v(" are way to start a flow with external events. For example, on a schedule date or waiting for some external events (like file creation)")]),e._v(" "),t("h2",{attrs:{id:"templates"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#templates"}},[e._v("#")]),e._v(" Templates")]),e._v(" "),t("p",[t("a",{attrs:{href:"../developer-guide/templates"}},[e._v("Templates")]),e._v(" are list of tasks that can be shared between flows. You can define a template and call it from other flows allowing to share a list of tasks and keep these task updated without changing your flow.")])])}),[],!1,null,null,null);a.default=r.exports}}]);